# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EKekn2MkIzWGi7WGQb9hQ8fyfYtCwzVJ
"""

!pip install -q streamlit

import streamlit as st
import requests

# Set up the page layout
st.set_page_config(
    page_title="Disease Detection AI",
    layout="wide",
    initial_sidebar_state="expanded",
)

# API Details
GEMINI_API_KEY = "your_gemini_api_key"
GEMINI_API_URL = "https://gemini.api.endpoint"  # Replace with the actual endpoint

# App Header
st.title("Disease Detection AI Dashboard")
st.write("Chat with the AI to analyze symptoms, get recommendations, and maintain health records.")

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Go to:",
    ("Chat with AI", "Upload Records", "View Recommendations", "Settings"),
)

# Chat with AI
if page == "Chat with AI":
    st.subheader("Chat with AI")
    st.write("Describe your symptoms, and let AI provide a diagnosis and recommendations.")

    chat_history = st.session_state.get("chat_history", [])
    user_input = st.text_input("Your Message:", placeholder="e.g., I have a headache and fever")

    if st.button("Send"):
        if user_input.strip():
            # Store user input in chat history
            chat_history.append({"role": "user", "content": user_input})

            # Make API call
            payload = {"symptoms": user_input}
            headers = {"Authorization": f"Bearer {GEMINI_API_KEY}"}

            try:
                response = requests.post(GEMINI_API_URL, json=payload, headers=headers)
                response_data = response.json()

                # Process AI's response
                ai_response = response_data.get("diagnosis", "Sorry, I couldn't analyze that.")
                chat_history.append({"role": "ai", "content": ai_response})

            except Exception as e:
                chat_history.append({"role": "ai", "content": f"Error: {str(e)}"})
        else:
            st.warning("Please enter your message.")

        # Store updated chat history
        st.session_state["chat_history"] = chat_history

    # Display chat history
    for message in chat_history:
        if message["role"] == "user":
            st.markdown(f"*You:* {message['content']}")
        else:
            st.markdown(f"*AI:* {message['content']}")

# Upload Records
elif page == "Upload Records":
    st.subheader("Upload Health Records")
    uploaded_file = st.file_uploader("Choose a file", type=["png", "jpg", "pdf", "csv"])
    if uploaded_file is not None:
        st.success("File uploaded successfully!")
        # Additional processing can be done here

# View Recommendations
elif page == "View Recommendations":
    st.subheader("View Past Recommendations")
    st.write("This section will display your previous interactions and recommendations.")

# Settings
elif page == "Settings":
    st.subheader("Settings")
    st.write("Customize your preferences here.")

!npm install localtunnel

import urllib
print("Password/Enpoint IP for localtunnel is:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

!streamlit run app.py &>/content/logs.txt &

!npx localtunnel --port 8501

pip install Flask

from flask import Flask, render_template, request, jsonify
app = Flask(__name__)

# Homepage route
@app.route('/')
def home():
    return render_template('index.html')

if __name__ == "__main__":
    app.run(debug=True)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personalized Website</title>
</head>
<body>
    <h1>Welcome to the Personalized Website</h1>
    <div id="personalizedContent">
        <!-- Personalized content will be injected here -->
    </div>

    <script>
        // Example JavaScript for interacting with backend (AJAX)
        fetch('/get_personalized_content', {
            method: 'GET',
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('personalizedContent').innerHTML = data.content;
        });
    </script>
</body>
</html>

!pip uninstall openai
!pip install openai==1.58.1

!pip install --upgrade openai

openai.api_key = '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'

response = openai.Completion.create(
  model="text-davinci-003",
  prompt="Summarize the following content:\n\n" + content_to_summarize,
  max_tokens=150
)

!ls -l

!sudo apt-get install tesseract-ocr
!pip install pytesseract Pillow pandas openpyxl

import pytesseract
from PIL import Image
import pandas as pd
import re
import os

# Function to extract text from an image
def extract_text_from_image(image_path):
    return pytesseract.image_to_string(Image.open(image_path))

# Function to parse invoice details from text
def parse_invoice(text):
    invoice_data = {}

    # Example regex patterns (adjust based on invoice formats)
    invoice_data['Invoice Number'] = re.search(r'Invoice Number[:\s]+(\w+)', text, re.IGNORECASE)
    invoice_data['Date'] = re.search(r'Date[:\s]+(\d{2}/\d{2}/\d{4})', text, re.IGNORECASE)
    invoice_data['Total Amount'] = re.search(r'Total[:\s]+\$?([\d,]+\.\d{2})', text, re.IGNORECASE)

    # Clean and format results
    for key in invoice_data:
        match = invoice_data[key]
        invoice_data[key] = match.group(1) if match else None

    return invoice_data

# Function to save structured data to Excel
def save_to_excel(data, output_path):
    df = pd.DataFrame([data])
    df.to_excel(output_path, index=False)
    print(f"Data saved to {output_path}")

# Example workflow
image_path = "path_to_invoice_image.jpg"  # Replace with your image path
output_excel = "invoice_data.xlsx"

try:
    # Step 1: Extract text
    text = extract_text_from_image(image_path)
    print("Extracted Text:\n", text)

    # Step 2: Parse details
    invoice_data = parse_invoice(text)
    print("Parsed Invoice Data:\n", invoice_data)

    # Step 3: Save to Excel
    save_to_excel(invoice_data, output_excel)

except Exception as e:
    print("Error:", str(e))