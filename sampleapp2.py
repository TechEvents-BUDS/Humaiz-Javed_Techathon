# -*- coding: utf-8 -*-
"""Untitled42.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1thOC94kZJLFWmZC16fm-5XMASxzmXnyR
"""

import streamlit as st
import google.generativeai as genai
import os
import pandas as pd

# Configure Gemini API
GOOGLE_API_KEY = "AIzaSyDHcavML2E6iVSOEK3a2cQlZhwZDqOvhAc"  # Replace with your Gemini API key
genai.configure(api_key=GOOGLE_API_KEY)

# Initialize the Gemini model
model = genai.GenerativeModel('gemini-pro')

# Set up Streamlit layout
st.set_page_config(page_title="Chat with Gemini", layout="centered")
st.title("Medical Diagnostics with Gemini")

# Option menu
menu = ["Chat with Gemini", "Upload Records", "View Recommendations", "Settings"]
choice = st.sidebar.selectbox("Select Option", menu)

# Store records (simulating database with a list or a file)
RECORDS_FILE = "medical_records.csv"
if not os.path.exists(RECORDS_FILE):
    df = pd.DataFrame(columns=["Symptoms", "Diagnosis", "Recommendations"])
    df.to_csv(RECORDS_FILE, index=False)

# Upload Records functionality
if choice == "Upload Records":
    st.subheader("Upload Your Medical Reports")
    uploaded_file = st.file_uploader("Choose a file", type=["txt", "pdf", "docx"])

    if uploaded_file is not None:
        file_content = uploaded_file.read()
        # Simulating content processing (you can add PDF, DOCX extraction code here)
        st.write(f"Uploaded file content: {file_content[:500]}")  # Displaying first 500 chars for preview

        # Save record (simulate saving the file)
        with open(f"records/{uploaded_file.name}", "wb") as f:
            f.write(file_content)

        st.success("Record uploaded successfully!")

# View Recommendations functionality
elif choice == "View Recommendations":
    st.subheader("View All Recommendations from Gemini")

    # Load past recommendations from records
    df = pd.read_csv(RECORDS_FILE)
    if df.empty:
        st.warning("No records found.")
    else:
        st.write(df)

# Settings functionality
elif choice == "Settings":
    st.subheader("Settings")

    # Settings for the AI (e.g., preference, privacy)
    with st.form(key='settings_form'):
        ai_temperature = st.slider("AI Response Temperature", 0.0, 1.0, 0.5)
        privacy_agreement = st.checkbox("Agree to share data with hospitals")
        submit_button = st.form_submit_button("Save Settings")

        if submit_button:
            st.success(f"Settings saved! Temperature: {ai_temperature}, Share with Hospitals: {privacy_agreement}")

# Chat with Gemini (Diagnostics)
elif choice == "Chat with Gemini":
    st.subheader("Chat with Gemini AI")

    # Text input to communicate with the AI
    user_input = st.text_input("Enter your symptoms or question:", placeholder="Type something...")

    if st.button("Get Diagnosis"):
        if user_input.strip():
            try:
                # Format the prompt for AI to diagnose symptoms
                prompt = f"Symptoms: {user_input}. Based on these symptoms, what disease might the person have?"
                response = model.generate_content(prompt)
                ai_response = response.text

                # Save diagnosis and recommendations to records
                diagnosis = ai_response.split("\n")[0]  # Assuming first line is the diagnosis
                recommendations = ai_response.split("\n")[1:]  # Remaining lines are recommendations
                df = pd.read_csv(RECORDS_FILE)
                new_data = pd.DataFrame({"Symptoms": [user_input], "Diagnosis": [diagnosis], "Recommendations": [" | ".join(recommendations)]})

                # Use pd.concat instead of append
                df = pd.concat([df, new_data], ignore_index=True)
                df.to_csv(RECORDS_FILE, index=False)

                # Display diagnosis and recommendations
                st.markdown(f"**Diagnosis:** {diagnosis}")
                st.markdown(f"**Recommendations:** {' | '.join(recommendations)}")

                st.success("Diagnosis and recommendations saved!")

            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
        else:
            st.warning("Please enter your symptoms.")

